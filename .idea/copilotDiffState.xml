<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/force-app/main/default/classes/discountCalculator/CronValidator.cls">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/force-app/main/default/classes/discountCalculator/CronValidator.cls" />
              <option name="originalContent" value="public class CronValidator {&#10;&#10;    private static final Map&lt;String, Integer&gt; DAY_OF_WEEK_MAP = new Map&lt;String, Integer&gt;{&#10;            'SUN' =&gt; 1, 'MON' =&gt; 2, 'TUE' =&gt; 3, 'WED' =&gt; 4, 'THU' =&gt; 5, 'FRI' =&gt; 6, 'SAT' =&gt; 7&#10;    };&#10;&#10;    public static Boolean isDue(String cronExpression, TimeZone userTimeZone) {&#10;        Datetime now = Datetime.now();&#10;&#10;        List&lt;String&gt; parts = cronExpression.split(' ');&#10;        if (parts.size() &lt; 6) {&#10;            System.debug(LoggingLevel.ERROR, 'Nieprawidłowy format cron. Oczekiwano co najmniej 6 części.');&#10;            return false;&#10;        }&#10;&#10;        Integer currentSecond = Integer.valueOf(now.format('s', userTimeZone.getID()));&#10;        Integer currentMinute = Integer.valueOf(now.format('m', userTimeZone.getID()));&#10;        Integer currentHour = Integer.valueOf(now.format('H', userTimeZone.getID()));&#10;        Integer currentDayOfMonth = Integer.valueOf(now.format('d', userTimeZone.getID()));&#10;        Integer currentMonth = Integer.valueOf(now.format('M', userTimeZone.getID()));&#10;        Integer currentDayOfWeek = Integer.valueOf(now.format('u', userTimeZone.getID())) == 7 ? 1 : Integer.valueOf(now.format('u', userTimeZone.getID())) + 1;&#10;        Integer currentYear = Integer.valueOf(now.format('yyyy', userTimeZone.getID()));&#10;&#10;        Boolean dayOfMonthIsWildcard = (parts[3] == '?');&#10;        Boolean dayOfWeekIsWildcard = (parts[5] == '?');&#10;&#10;        if (dayOfMonthIsWildcard == dayOfWeekIsWildcard) {&#10;            return false;&#10;        }&#10;&#10;        Boolean secondsMatch = checkValue(currentSecond, parts[0]);&#10;        Boolean minutesMatch = checkValue(currentMinute, parts[1]);&#10;        Boolean hoursMatch = checkValue(currentHour, parts[2]);&#10;        Boolean monthsMatch = checkValue(currentMonth, parts[4]);&#10;        Boolean yearsMatch = (parts.size() &lt; 7 || checkValue(currentYear, parts[6]));&#10;&#10;        Boolean dayOfMonthMatch = dayOfMonthIsWildcard ? true : checkValue(currentDayOfMonth, parts[3]);&#10;        Boolean dayOfWeekMatch = dayOfWeekIsWildcard ? true : checkDayOfWeek(currentDayOfWeek, parts[5]);&#10;&#10;        if (dayOfMonthIsWildcard) {&#10;            return secondsMatch &amp;&amp; minutesMatch &amp;&amp; hoursMatch &amp;&amp; monthsMatch &amp;&amp; dayOfWeekMatch &amp;&amp; yearsMatch;&#10;        } else {&#10;            return secondsMatch &amp;&amp; minutesMatch &amp;&amp; hoursMatch &amp;&amp; monthsMatch &amp;&amp; dayOfMonthMatch &amp;&amp; yearsMatch;&#10;        }&#10;    }&#10;    private static Boolean checkValue(Integer value, String cronPart) {&#10;        if (cronPart == '*' || cronPart == '?') {&#10;            return true;&#10;        }&#10;&#10;        if (cronPart.contains(',')) {&#10;            for (String part : cronPart.split(',')) {&#10;                if (checkValue(value, part)) {&#10;                    return true;&#10;                }&#10;            }&#10;            return false;&#10;        }&#10;&#10;        if (cronPart.contains('/')) {&#10;            List&lt;String&gt; stepParts = cronPart.split('/');&#10;            Integer step = Integer.valueOf(stepParts[1]);&#10;            if (stepParts[0] == '*') {&#10;                return (Math.mod(value, step) == 0);&#10;            } else {&#10;                if (stepParts[0].contains('-')) {&#10;                    List&lt;String&gt; rangeParts = stepParts[0].split('-');&#10;                    Integer start = Integer.valueOf(rangeParts[0]);&#10;                    if (value &gt;= start) {&#10;                        return (Math.mod(value - start, step) == 0);&#10;                    }&#10;                }&#10;            }&#10;            return false;&#10;        }&#10;&#10;        if (cronPart.contains('-')) {&#10;            List&lt;String&gt; rangeParts = cronPart.split('-');&#10;            Integer start = Integer.valueOf(rangeParts[0]);&#10;            Integer end = Integer.valueOf(rangeParts[1]);&#10;            return (value &gt;= start &amp;&amp; value &lt;= end);&#10;        }&#10;&#10;        return Integer.valueOf(cronPart) == value;&#10;    }&#10;&#10;    private static Boolean checkDayOfWeek(Integer currentDayNum, String cronPart) {&#10;        if (cronPart == '*' || cronPart == '?') {&#10;            return true;&#10;        }&#10;&#10;        cronPart = cronPart.toUpperCase();&#10;&#10;        if (cronPart.contains(',')) {&#10;            for (String part : cronPart.split(',')) {&#10;                if (checkDayOfWeek(currentDayNum, part)) {&#10;                    return true;&#10;                }&#10;            }&#10;            return false;&#10;        }&#10;&#10;        if (cronPart.contains('-')) {&#10;            List&lt;String&gt; rangeParts = cronPart.split('-');&#10;            Integer start = DAY_OF_WEEK_MAP.get(rangeParts[0]);&#10;            Integer end = DAY_OF_WEEK_MAP.get(rangeParts[1]);&#10;&#10;            if (start == null || end == null) return false;&#10;&#10;            if (start &lt;= end) {&#10;                return currentDayNum &gt;= start &amp;&amp; currentDayNum &lt;= end;&#10;            } else {&#10;                return currentDayNum &gt;= start || currentDayNum &lt;= end;&#10;            }&#10;        }&#10;&#10;        return DAY_OF_WEEK_MAP.get(cronPart) == currentDayNum;&#10;    }&#10;}" />
              <option name="updatedContent" value="public class CronValidator {&#10;&#10;    private static final Map&lt;String, Integer&gt; DAY_OF_WEEK_MAP = new Map&lt;String, Integer&gt;{&#10;            'SUN' =&gt; 1, 'MON' =&gt; 2, 'TUE' =&gt; 3, 'WED' =&gt; 4, 'THU' =&gt; 5, 'FRI' =&gt; 6, 'SAT' =&gt; 7&#10;    };&#10;&#10;    public static Boolean isDue(String cronExpression, TimeZone userTimeZone) {&#10;        Datetime now = Datetime.now();&#10;&#10;        List&lt;String&gt; parts = cronExpression.split(' ');&#10;        if (parts.size() &lt; 6) {&#10;            System.debug(LoggingLevel.ERROR, 'Nieprawidłowy format cron. Oczekiwano co najmniej 6 części.');&#10;            return false;&#10;        }&#10;&#10;        Integer currentSecond = Integer.valueOf(now.format('s', userTimeZone.getID()));&#10;        Integer currentMinute = Integer.valueOf(now.format('m', userTimeZone.getID()));&#10;        Integer currentHour = Integer.valueOf(now.format('H', userTimeZone.getID()));&#10;        Integer currentDayOfMonth = Integer.valueOf(now.format('d', userTimeZone.getID()));&#10;        Integer currentMonth = Integer.valueOf(now.format('M', userTimeZone.getID()));&#10;        Integer currentDayOfWeek = Integer.valueOf(now.format('u', userTimeZone.getID())) == 7 ? 1 : Integer.valueOf(now.format('u', userTimeZone.getID())) + 1;&#10;        Integer currentYear = Integer.valueOf(now.format('yyyy', userTimeZone.getID()));&#10;&#10;        Boolean dayOfMonthIsWildcard = (parts[3] == '?');&#10;        Boolean dayOfWeekIsWildcard = (parts[5] == '?');&#10;&#10;        if (dayOfMonthIsWildcard == dayOfWeekIsWildcard) {&#10;            return false;&#10;        }&#10;&#10;        Boolean secondsMatch = checkValue(currentSecond, parts[0]);&#10;        Boolean minutesMatch = checkValue(currentMinute, parts[1]);&#10;        Boolean hoursMatch = checkValue(currentHour, parts[2]);&#10;        Boolean monthsMatch = checkValue(currentMonth, parts[4]);&#10;        Boolean yearsMatch = (parts.size() &lt; 7 || checkValue(currentYear, parts[6]));&#10;&#10;        Boolean dayOfMonthMatch = dayOfMonthIsWildcard ? true : checkValue(currentDayOfMonth, parts[3]);&#10;        Boolean dayOfWeekMatch = dayOfWeekIsWildcard ? true : checkDayOfWeek(currentDayOfWeek, parts[5]);&#10;&#10;        if (dayOfMonthIsWildcard) {&#10;            return secondsMatch &amp;&amp; minutesMatch &amp;&amp; hoursMatch &amp;&amp; monthsMatch &amp;&amp; dayOfWeekMatch &amp;&amp; yearsMatch;&#10;        } else {&#10;            return secondsMatch &amp;&amp; minutesMatch &amp;&amp; hoursMatch &amp;&amp; monthsMatch &amp;&amp; dayOfMonthMatch &amp;&amp; yearsMatch;&#10;        }&#10;    }&#10;    private static Boolean checkValue(Integer value, String cronPart) {&#10;        if (cronPart == '*' || cronPart == '?') {&#10;            return true;&#10;        }&#10;&#10;        if (cronPart.contains(',')) {&#10;            for (String part : cronPart.split(',')) {&#10;                if (checkValue(value, part)) {&#10;                    return true;&#10;                }&#10;            }&#10;            return false;&#10;        }&#10;&#10;        if (cronPart.contains('/')) {&#10;            List&lt;String&gt; stepParts = cronPart.split('/');&#10;            Integer step = Integer.valueOf(stepParts[1]);&#10;            if (stepParts[0] == '*') {&#10;                return (Math.mod(value, step) == 0);&#10;            } else {&#10;                if (stepParts[0].contains('-')) {&#10;                    List&lt;String&gt; rangeParts = stepParts[0].split('-');&#10;                    Integer start = Integer.valueOf(rangeParts[0]);&#10;                    if (value &gt;= start) {&#10;                        return (Math.mod(value - start, step) == 0);&#10;                    }&#10;                }&#10;            }&#10;            return false;&#10;        }&#10;&#10;        if (cronPart.contains('-')) {&#10;            List&lt;String&gt; rangeParts = cronPart.split('-');&#10;            Integer start = Integer.valueOf(rangeParts[0]);&#10;            Integer endVal = Integer.valueOf(rangeParts[1]); // changed from 'end' to 'endVal'&#10;            return (value &gt;= start &amp;&amp; value &lt;= endVal);&#10;        }&#10;&#10;        return Integer.valueOf(cronPart) == value;&#10;    }&#10;&#10;    private static Boolean checkDayOfWeek(Integer currentDayNum, String cronPart) {&#10;        if (cronPart == '*' || cronPart == '?') {&#10;            return true;&#10;        }&#10;&#10;        cronPart = cronPart.toUpperCase();&#10;&#10;        if (cronPart.contains(',')) {&#10;            for (String part : cronPart.split(',')) {&#10;                if (checkDayOfWeek(currentDayNum, part)) {&#10;                    return true;&#10;                }&#10;            }&#10;            return false;&#10;        }&#10;&#10;        if (cronPart.contains('-')) {&#10;            List&lt;String&gt; rangeParts = cronPart.split('-');&#10;            Integer start = DAY_OF_WEEK_MAP.get(rangeParts[0]);&#10;            Integer endVal = DAY_OF_WEEK_MAP.get(rangeParts[1]); // changed from 'end' to 'endVal'&#10;&#10;            if (start == null || endVal == null) return false;&#10;&#10;            if (start &lt;= endVal) {&#10;                return currentDayNum &gt;= start &amp;&amp; currentDayNum &lt;= endVal;&#10;            } else {&#10;                return currentDayNum &gt;= start || currentDayNum &lt;= endVal;&#10;            }&#10;        }&#10;&#10;        return DAY_OF_WEEK_MAP.get(cronPart) == currentDayNum;&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>
<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/force-app/main/default/classes/discountCalculator/ConditionLogicValidator.cls">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/force-app/main/default/classes/discountCalculator/ConditionLogicValidator.cls" />
              <option name="originalContent" value="public with sharing class ConditionLogicValidator {&#10;    public static Boolean filterDiscountsByConditionLogic(Discount__c discount, Order order){&#10;        String operator = discount.Condition_Logic_Operator__c;&#10;        String objectNameWithFieldName = discount.Condition_Logic_Field__c;&#10;        Decimal numericValue = discount.Condition_Logic_Numeric_Value__c;&#10;        Decimal fieldNameValue = 0;&#10;        System.debug('Condition Logic: '+ objectNameWithFieldName + ' ' + operator + ' ' + numericValue);&#10;        switch on objectNameWithFieldName {&#10;            when 'Order.Products_Amount' {&#10;                fieldNameValue = order.OrderItems.size();&#10;            }&#10;            when 'Order.Products_Total_Price' {&#10;                Decimal totalPrice = 0;&#10;                for (OrderItem item : order.OrderItems) {&#10;                    totalPrice += item.UnitPrice * item.Quantity;&#10;                }&#10;                fieldNameValue = totalPrice;&#10;            }&#10;        }&#10;        System.debug('Field Name Value: ' + fieldNameValue);&#10;&#10;        switch on operator {&#10;            when '&gt;' {&#10;                if (fieldNameValue &gt; numericValue) {&#10;                    return true;&#10;                }&#10;            }&#10;            when '==' {&#10;                if (fieldNameValue == numericValue) {&#10;                    return true;&#10;                }&#10;            }&#10;            when '&lt;' {&#10;                if (fieldNameValue &lt; numericValue) {&#10;                    return true;&#10;                }&#10;            }&#10;            when '&lt;=' {&#10;                if (fieldNameValue &lt;= numericValue) {&#10;                    return true;&#10;                }&#10;            }&#10;            when '&gt;=' {&#10;                if (fieldNameValue &gt;= numericValue) {&#10;                    return true;&#10;                }&#10;            }&#10;            when '!=' {&#10;                if (fieldNameValue != numericValue) {&#10;                    return true;&#10;                }&#10;            }&#10;        }&#10;        return false;&#10;    }&#10;}" />
              <option name="updatedContent" value="public with sharing class ConditionLogicValidator {&#10;    public static Boolean filterDiscountsByConditionLogic(Discount__c discount, Id orderId){&#10;        // Query the order and its order items&#10;        Order order = [SELECT Id, (SELECT Id, UnitPrice, Quantity FROM OrderItems) FROM Order WHERE Id = :orderId LIMIT 1];&#10;        String operator = discount.Condition_Logic_Operator__c;&#10;        String objectNameWithFieldName = discount.Condition_Logic_Field__c;&#10;        Decimal numericValue = discount.Condition_Logic_Numeric_Value__c;&#10;        Decimal fieldNameValue = 0;&#10;        System.debug('Condition Logic: '+ objectNameWithFieldName + ' ' + operator + ' ' + numericValue);&#10;        switch on objectNameWithFieldName {&#10;            when 'Order.Products_Amount' {&#10;                fieldNameValue = order.OrderItems.size();&#10;            }&#10;            when 'Order.Products_Total_Price' {&#10;                Decimal totalPrice = 0;&#10;                for (OrderItem item : order.OrderItems) {&#10;                    totalPrice += item.UnitPrice * item.Quantity;&#10;                }&#10;                fieldNameValue = totalPrice;&#10;            }&#10;        }&#10;        System.debug('Field Name Value: ' + fieldNameValue);&#10;&#10;        switch on operator {&#10;            when '&gt;' {&#10;                if (fieldNameValue &gt; numericValue) {&#10;                    return true;&#10;                }&#10;            }&#10;            when '==' {&#10;                if (fieldNameValue == numericValue) {&#10;                    return true;&#10;                }&#10;            }&#10;            when '&lt;' {&#10;                if (fieldNameValue &lt; numericValue) {&#10;                    return true;&#10;                }&#10;            }&#10;            when '&lt;=' {&#10;                if (fieldNameValue &lt;= numericValue) {&#10;                    return true;&#10;                }&#10;            }&#10;            when '&gt;=' {&#10;                if (fieldNameValue &gt;= numericValue) {&#10;                    return true;&#10;                }&#10;            }&#10;            when '!=' {&#10;                if (fieldNameValue != numericValue) {&#10;                    return true;&#10;                }&#10;            }&#10;        }&#10;        return false;&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/force-app/main/default/classes/discountCalculator/CronValidator.cls">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/force-app/main/default/classes/discountCalculator/CronValidator.cls" />
              <option name="originalContent" value="public class CronValidator {&#10;&#10;    private static final Map&lt;String, Integer&gt; DAY_OF_WEEK_MAP = new Map&lt;String, Integer&gt;{&#10;            'SUN' =&gt; 1, 'MON' =&gt; 2, 'TUE' =&gt; 3, 'WED' =&gt; 4, 'THU' =&gt; 5, 'FRI' =&gt; 6, 'SAT' =&gt; 7&#10;    };&#10;&#10;    public static Boolean isDue(String cronExpression, TimeZone userTimeZone) {&#10;        Datetime now = Datetime.now();&#10;&#10;        List&lt;String&gt; parts = cronExpression.split(' ');&#10;        if (parts.size() &lt; 6) {&#10;            System.debug(LoggingLevel.ERROR, 'Nieprawidłowy format cron. Oczekiwano co najmniej 6 części.');&#10;            return false;&#10;        }&#10;&#10;        Integer currentSecond = Integer.valueOf(now.format('s', userTimeZone.getID()));&#10;        Integer currentMinute = Integer.valueOf(now.format('m', userTimeZone.getID()));&#10;        Integer currentHour = Integer.valueOf(now.format('H', userTimeZone.getID()));&#10;        Integer currentDayOfMonth = Integer.valueOf(now.format('d', userTimeZone.getID()));&#10;        Integer currentMonth = Integer.valueOf(now.format('M', userTimeZone.getID()));&#10;        Integer currentDayOfWeek = Integer.valueOf(now.format('u', userTimeZone.getID())) == 7 ? 1 : Integer.valueOf(now.format('u', userTimeZone.getID())) + 1;&#10;        Integer currentYear = Integer.valueOf(now.format('yyyy', userTimeZone.getID()));&#10;&#10;        Boolean dayOfMonthIsWildcard = (parts[3] == '?');&#10;        Boolean dayOfWeekIsWildcard = (parts[5] == '?');&#10;&#10;        if (dayOfMonthIsWildcard == dayOfWeekIsWildcard) {&#10;            return false;&#10;        }&#10;&#10;        Boolean secondsMatch = checkValue(currentSecond, parts[0]);&#10;        Boolean minutesMatch = checkValue(currentMinute, parts[1]);&#10;        Boolean hoursMatch = checkValue(currentHour, parts[2]);&#10;        Boolean monthsMatch = checkValue(currentMonth, parts[4]);&#10;        Boolean yearsMatch = (parts.size() &lt; 7 || checkValue(currentYear, parts[6]));&#10;&#10;        Boolean dayOfMonthMatch = dayOfMonthIsWildcard ? true : checkValue(currentDayOfMonth, parts[3]);&#10;        Boolean dayOfWeekMatch = dayOfWeekIsWildcard ? true : checkDayOfWeek(currentDayOfWeek, parts[5]);&#10;&#10;        if (dayOfMonthIsWildcard) {&#10;            return secondsMatch &amp;&amp; minutesMatch &amp;&amp; hoursMatch &amp;&amp; monthsMatch &amp;&amp; dayOfWeekMatch &amp;&amp; yearsMatch;&#10;        } else {&#10;            return secondsMatch &amp;&amp; minutesMatch &amp;&amp; hoursMatch &amp;&amp; monthsMatch &amp;&amp; dayOfMonthMatch &amp;&amp; yearsMatch;&#10;        }&#10;    }&#10;    private static Boolean checkValue(Integer value, String cronPart) {&#10;        if (cronPart == '*' || cronPart == '?') {&#10;            return true;&#10;        }&#10;&#10;        if (cronPart.contains(',')) {&#10;            for (String part : cronPart.split(',')) {&#10;                if (checkValue(value, part)) {&#10;                    return true;&#10;                }&#10;            }&#10;            return false;&#10;        }&#10;&#10;        if (cronPart.contains('/')) {&#10;            List&lt;String&gt; stepParts = cronPart.split('/');&#10;            Integer step = Integer.valueOf(stepParts[1]);&#10;            if (stepParts[0] == '*') {&#10;                return (Math.mod(value, step) == 0);&#10;            } else {&#10;                if (stepParts[0].contains('-')) {&#10;                    List&lt;String&gt; rangeParts = stepParts[0].split('-');&#10;                    Integer start = Integer.valueOf(rangeParts[0]);&#10;                    if (value &gt;= start) {&#10;                        return (Math.mod(value - start, step) == 0);&#10;                    }&#10;                }&#10;            }&#10;            return false;&#10;        }&#10;&#10;        if (cronPart.contains('-')) {&#10;            List&lt;String&gt; rangeParts = cronPart.split('-');&#10;            Integer start = Integer.valueOf(rangeParts[0]);&#10;            Integer end = Integer.valueOf(rangeParts[1]);&#10;            return (value &gt;= start &amp;&amp; value &lt;= end);&#10;        }&#10;&#10;        return Integer.valueOf(cronPart) == value;&#10;    }&#10;&#10;    private static Boolean checkDayOfWeek(Integer currentDayNum, String cronPart) {&#10;        if (cronPart == '*' || cronPart == '?') {&#10;            return true;&#10;        }&#10;&#10;        cronPart = cronPart.toUpperCase();&#10;&#10;        if (cronPart.contains(',')) {&#10;            for (String part : cronPart.split(',')) {&#10;                if (checkDayOfWeek(currentDayNum, part)) {&#10;                    return true;&#10;                }&#10;            }&#10;            return false;&#10;        }&#10;&#10;        if (cronPart.contains('-')) {&#10;            List&lt;String&gt; rangeParts = cronPart.split('-');&#10;            Integer start = DAY_OF_WEEK_MAP.get(rangeParts[0]);&#10;            Integer end = DAY_OF_WEEK_MAP.get(rangeParts[1]);&#10;&#10;            if (start == null || end == null) return false;&#10;&#10;            if (start &lt;= end) {&#10;                return currentDayNum &gt;= start &amp;&amp; currentDayNum &lt;= end;&#10;            } else {&#10;                return currentDayNum &gt;= start || currentDayNum &lt;= end;&#10;            }&#10;        }&#10;&#10;        return DAY_OF_WEEK_MAP.get(cronPart) == currentDayNum;&#10;    }&#10;}" />
              <option name="updatedContent" value="public class CronValidator {&#10;&#10;    private static final Map&lt;String, Integer&gt; DAY_OF_WEEK_MAP = new Map&lt;String, Integer&gt;{&#10;            'SUN' =&gt; 1, 'MON' =&gt; 2, 'TUE' =&gt; 3, 'WED' =&gt; 4, 'THU' =&gt; 5, 'FRI' =&gt; 6, 'SAT' =&gt; 7&#10;    };&#10;&#10;    public static Boolean isDue(String cronExpression, TimeZone userTimeZone) {&#10;        Datetime now = Datetime.now();&#10;&#10;        List&lt;String&gt; parts = cronExpression.split(' ');&#10;        if (parts.size() &lt; 6) {&#10;            System.debug(LoggingLevel.ERROR, 'Nieprawidłowy format cron. Oczekiwano co najmniej 6 części.');&#10;            return false;&#10;        }&#10;&#10;        Integer currentSecond = Integer.valueOf(now.format('s', userTimeZone.getID()));&#10;        Integer currentMinute = Integer.valueOf(now.format('m', userTimeZone.getID()));&#10;        Integer currentHour = Integer.valueOf(now.format('H', userTimeZone.getID()));&#10;        Integer currentDayOfMonth = Integer.valueOf(now.format('d', userTimeZone.getID()));&#10;        Integer currentMonth = Integer.valueOf(now.format('M', userTimeZone.getID()));&#10;        Integer currentDayOfWeek = Integer.valueOf(now.format('u', userTimeZone.getID())) == 7 ? 1 : Integer.valueOf(now.format('u', userTimeZone.getID())) + 1;&#10;        Integer currentYear = Integer.valueOf(now.format('yyyy', userTimeZone.getID()));&#10;&#10;        Boolean dayOfMonthIsWildcard = (parts[3] == '?');&#10;        Boolean dayOfWeekIsWildcard = (parts[5] == '?');&#10;&#10;        if (dayOfMonthIsWildcard == dayOfWeekIsWildcard) {&#10;            return false;&#10;        }&#10;&#10;        Boolean secondsMatch = checkValue(currentSecond, parts[0]);&#10;        Boolean minutesMatch = checkValue(currentMinute, parts[1]);&#10;        Boolean hoursMatch = checkValue(currentHour, parts[2]);&#10;        Boolean monthsMatch = checkValue(currentMonth, parts[4]);&#10;        Boolean yearsMatch = (parts.size() &lt; 7 || checkValue(currentYear, parts[6]));&#10;&#10;        Boolean dayOfMonthMatch = dayOfMonthIsWildcard ? true : checkValue(currentDayOfMonth, parts[3]);&#10;        Boolean dayOfWeekMatch = dayOfWeekIsWildcard ? true : checkDayOfWeek(currentDayOfWeek, parts[5]);&#10;&#10;        if (dayOfMonthIsWildcard) {&#10;            return secondsMatch &amp;&amp; minutesMatch &amp;&amp; hoursMatch &amp;&amp; monthsMatch &amp;&amp; dayOfWeekMatch &amp;&amp; yearsMatch;&#10;        } else {&#10;            return secondsMatch &amp;&amp; minutesMatch &amp;&amp; hoursMatch &amp;&amp; monthsMatch &amp;&amp; dayOfMonthMatch &amp;&amp; yearsMatch;&#10;        }&#10;    }&#10;    private static Boolean checkValue(Integer value, String cronPart) {&#10;        if (cronPart == '*' || cronPart == '?') {&#10;            return true;&#10;        }&#10;&#10;        if (cronPart.contains(',')) {&#10;            for (String part : cronPart.split(',')) {&#10;                if (checkValue(value, part)) {&#10;                    return true;&#10;                }&#10;            }&#10;            return false;&#10;        }&#10;&#10;        if (cronPart.contains('/')) {&#10;            List&lt;String&gt; stepParts = cronPart.split('/');&#10;            Integer step = Integer.valueOf(stepParts[1]);&#10;            if (stepParts[0] == '*') {&#10;                return (Math.mod(value, step) == 0);&#10;            } else {&#10;                if (stepParts[0].contains('-')) {&#10;                    List&lt;String&gt; rangeParts = stepParts[0].split('-');&#10;                    Integer start = Integer.valueOf(rangeParts[0]);&#10;                    if (value &gt;= start) {&#10;                        return (Math.mod(value - start, step) == 0);&#10;                    }&#10;                }&#10;            }&#10;            return false;&#10;        }&#10;&#10;        if (cronPart.contains('-')) {&#10;            List&lt;String&gt; rangeParts = cronPart.split('-');&#10;            Integer start = Integer.valueOf(rangeParts[0]);&#10;            Integer endVal = Integer.valueOf(rangeParts[1]); // changed from 'end' to 'endVal'&#10;            return (value &gt;= start &amp;&amp; value &lt;= endVal);&#10;        }&#10;&#10;        return Integer.valueOf(cronPart) == value;&#10;    }&#10;&#10;    private static Boolean checkDayOfWeek(Integer currentDayNum, String cronPart) {&#10;        if (cronPart == '*' || cronPart == '?') {&#10;            return true;&#10;        }&#10;&#10;        cronPart = cronPart.toUpperCase();&#10;&#10;        if (cronPart.contains(',')) {&#10;            for (String part : cronPart.split(',')) {&#10;                if (checkDayOfWeek(currentDayNum, part)) {&#10;                    return true;&#10;                }&#10;            }&#10;            return false;&#10;        }&#10;&#10;        if (cronPart.contains('-')) {&#10;            List&lt;String&gt; rangeParts = cronPart.split('-');&#10;            Integer start = DAY_OF_WEEK_MAP.get(rangeParts[0]);&#10;            Integer endVal = DAY_OF_WEEK_MAP.get(rangeParts[1]); // changed from 'end' to 'endVal'&#10;&#10;            if (start == null || endVal == null) return false;&#10;&#10;            if (start &lt;= endVal) {&#10;                return currentDayNum &gt;= start &amp;&amp; currentDayNum &lt;= endVal;&#10;            } else {&#10;                return currentDayNum &gt;= start || currentDayNum &lt;= endVal;&#10;            }&#10;        }&#10;&#10;        return DAY_OF_WEEK_MAP.get(cronPart) == currentDayNum;&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/force-app/main/default/classes/discountCalculator/DiscountCalculatorHandler.cls">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/force-app/main/default/classes/discountCalculator/DiscountCalculatorHandler.cls" />
              <option name="originalContent" value="public with sharing class DiscountCalculatorHandler {&#10;    private class DiscountSettings {&#10;        public String strategy;&#10;        public Decimal maxDiscountPercent;&#10;&#10;        public DiscountSettings() {&#10;            List&lt;Discount_Settings__mdt&gt; settingsList = [&#10;                    SELECT Discount_Strategy__c, Max_Overall_Discount_Percentage__c&#10;                    FROM Discount_Settings__mdt&#10;                    LIMIT 1&#10;            ];&#10;            if (!settingsList.isEmpty()) {&#10;                Discount_Settings__mdt settings = settingsList[0];&#10;                this.strategy = settings.Discount_Strategy__c;&#10;                this.maxDiscountPercent = settings.Max_Overall_Discount_Percentage__c;&#10;            } else {&#10;                this.strategy = 'Highest';&#10;                this.maxDiscountPercent = 50.0;&#10;            }&#10;        }&#10;    }&#10;&#10;    public static void applyDiscounts(List&lt;Order&gt; newOrders) {&#10;&#10;        DiscountSettings settings = new DiscountSettings();&#10;&#10;        List&lt;Discount__c&gt; activeDiscounts = [SELECT Id, Name, Discount_Type__c, Value_Type__c, Discount_Value__c,&#10;                Start_Date__c, End_Date__c, Cron_Expression__c, Condition_Logic__c&#10;        FROM Discount__c WHERE Is_Active__c = true];&#10;&#10;        List&lt;Applied_Discount__c&gt; discountsToApply = new List&lt;Applied_Discount__c&gt;();&#10;&#10;        for (Order ord : newOrders) {&#10;            List&lt;Discount__c&gt; applicableDiscounts = findApplicableDiscounts(ord, activeDiscounts);&#10;&#10;            if (applicableDiscounts.isEmpty()) {&#10;                continue;&#10;            }&#10;&#10;            List&lt;Discount__c&gt; finalDiscounts = applyStrategy(applicableDiscounts, settings.strategy);&#10;            calculateAndAssignFinalDiscount(ord, finalDiscounts, settings, discountsToApply);&#10;        }&#10;        if (!discountsToApply.isEmpty()) {&#10;            insert discountsToApply;&#10;&#10;            updateTimesUsedCounter(discountsToApply);&#10;        }&#10;    }&#10;&#10;    private static List&lt;Discount__c&gt; findApplicableDiscounts(Order ord, List&lt;Discount__c&gt; activeDiscounts) {&#10;        List&lt;Discount__c&gt; matchedDiscounts = new List&lt;Discount__c&gt;();&#10;        Date today = Date.today();&#10;&#10;        for (Discount__c disc : activeDiscounts) {&#10;            Boolean isApplicable = false;&#10;            if (disc.Discount_Type__c == 'Time-Bound') {&#10;                if (disc.Start_Date__c &lt;= today &amp;&amp; disc.End_Date__c &gt;= today) {&#10;                    isApplicable = true;&#10;                }&#10;            } else if (disc.Discount_Type__c == 'Conditional') {&#10;                if (String.isNotBlank(disc.Condition_Logic__c) &amp;&amp; disc.Condition_Logic__c.contains('&gt;')) {&#10;                    List&lt;String&gt; parts = disc.Condition_Logic__c.split('&gt;');&#10;                    String fieldName = parts[0].trim().split('\\.')[1];&#10;                    Decimal value = Decimal.valueOf(parts[1].trim());&#10;&#10;                    if (ord.get(fieldName) != null &amp;&amp; (Decimal) ord.get(fieldName) &gt; value) {&#10;                        isApplicable = true;&#10;                    }&#10;                }&#10;            } else if (disc.Discount_Type__c == 'Recurring') {&#10;                if (isCronScheduledForToday(disc.Cron_Expression__c)) {&#10;                    isApplicable = true;&#10;                }&#10;            }&#10;&#10;            if (isApplicable) {&#10;                matchedDiscounts.add(disc);&#10;            }&#10;        }&#10;        return matchedDiscounts;&#10;    }&#10;&#10;    private static List&lt;Discount__c&gt; applyStrategy(List&lt;Discount__c&gt; applicableDiscounts, String strategy) {&#10;        if (applicableDiscounts.size() &lt;= 1) {&#10;            return applicableDiscounts;&#10;        }&#10;&#10;        List&lt;Discount__c&gt; finalDiscounts = new List&lt;Discount__c&gt;();&#10;&#10;        if (strategy == 'Combine') {&#10;            return applicableDiscounts;&#10;        } else if (strategy == 'Highest' || strategy == 'Lowest') {&#10;            Discount__c bestDiscount = applicableDiscounts[0];&#10;            for (Integer i = 1; i &lt; applicableDiscounts.size(); i++) {&#10;                if (strategy == 'Highest' &amp;&amp; applicableDiscounts[i].Discount_Value__c &gt; bestDiscount.Discount_Value__c) {&#10;                    bestDiscount = applicableDiscounts[i];&#10;                } else if (strategy == 'Lowest' &amp;&amp; applicableDiscounts[i].Discount_Value__c &lt; bestDiscount.Discount_Value__c) {&#10;                    bestDiscount = applicableDiscounts[i];&#10;                }&#10;            }&#10;            finalDiscounts.add(bestDiscount);&#10;        }&#10;        return finalDiscounts;&#10;    }&#10;    private static void calculateAndAssignFinalDiscount(Order ord, List&lt;Discount__c&gt; finalDiscounts, DiscountSettings settings, List&lt;Applied_Discount__c&gt; discountsToApply) {&#10;        Decimal totalDiscountAmount = 0;&#10;        Decimal originalOrderAmount = ord.TotalAmount == null ? 0 : ord.TotalAmount;&#10;&#10;        for (Discount__c disc : finalDiscounts) {&#10;            Decimal currentDiscountValue = 0;&#10;            if (disc.Value_Type__c == 'Percentage') {&#10;                currentDiscountValue = (originalOrderAmount * (disc.Discount_Value__c / 100)).setScale(2);&#10;            } else {&#10;                currentDiscountValue = disc.Discount_Value__c;&#10;            }&#10;            totalDiscountAmount += currentDiscountValue;&#10;            discountsToApply.add(new Applied_Discount__c(&#10;                    Order__c = ord.Id,&#10;                    Discount__c = disc.Id,&#10;                    Amount_Discounted__c = currentDiscountValue&#10;            ));&#10;        }&#10;&#10;        Decimal maxAllowedDiscount = originalOrderAmount * (settings.maxDiscountPercent / 100);&#10;        if (totalDiscountAmount &gt; maxAllowedDiscount) {&#10;            totalDiscountAmount = maxAllowedDiscount;&#10;        }&#10;        System.debug('Dla zamówienia ' + ord.Id + ' zastosowano zniżkę w wysokości: ' + totalDiscountAmount);&#10;    }&#10;&#10;    private static void updateTimesUsedCounter(List&lt;Applied_Discount__c&gt; applied) {&#10;        Map&lt;Id, Discount__c&gt; discountsToUpdate = new Map&lt;Id, Discount__c&gt;();&#10;        for (Applied_Discount__c ad : applied) {&#10;            if (!discountsToUpdate.containsKey(ad.Discount__c)) {&#10;                discountsToUpdate.put(ad.Discount__c, new Discount__c(Id = ad.Discount__c, Times_Used__c = 0));&#10;            }&#10;            Discount__c disc = discountsToUpdate.get(ad.Discount__c);&#10;            disc.Times_Used__c += 1;&#10;        }&#10;        update discountsToUpdate.values();&#10;    }&#10;&#10;    public static Boolean isCronScheduledForToday(String cron) {&#10;        if (String.isBlank(cron)) return false;&#10;        if (cron.contains(String.valueOf(Date.today().day()))) {&#10;            return true;&#10;        }&#10;        return false;&#10;    }&#10;}" />
              <option name="updatedContent" value="public with sharing class DiscountCalculatorHandler {&#10;    private class DiscountSettings {&#10;        public String strategy;&#10;        public Decimal maxDiscountPercent;&#10;&#10;        public DiscountSettings() {&#10;            List&lt;Discount_Settings__mdt&gt; settingsList = [&#10;                    SELECT Discount_Strategy__c, Max_Overall_Discount_Percentage__c&#10;                    FROM Discount_Settings__mdt&#10;                    LIMIT 1&#10;            ];&#10;            if (!settingsList.isEmpty()) {&#10;                Discount_Settings__mdt settings = settingsList[0];&#10;                this.strategy = settings.Discount_Strategy__c;&#10;                this.maxDiscountPercent = settings.Max_Overall_Discount_Percentage__c;&#10;            } else {&#10;                this.strategy = 'Highest';&#10;                this.maxDiscountPercent = 50.0;&#10;            }&#10;        }&#10;    }&#10;&#10;    public static Map&lt;Id, List&lt;Discount__c&gt;&gt; calculateDiscounts(List&lt;Order&gt; newOrders) {&#10;        DiscountSettings settings = new DiscountSettings();&#10;        List&lt;Discount__c&gt; activeDiscounts = [SELECT Id, Name, Discount_Type__c, Value_Type__c, Discount_Value__c,&#10;                Start_Date__c, End_Date__c, Cron_Expression__c, Condition_Logic__c&#10;        FROM Discount__c WHERE Is_Active__c = true];&#10;        Map&lt;Id, List&lt;Discount__c&gt;&gt; orderToDiscounts = new Map&lt;Id, List&lt;Discount__c&gt;&gt;();&#10;        for (Order ord : newOrders) {&#10;            List&lt;Discount__c&gt; applicableDiscounts = findApplicableDiscounts(ord, activeDiscounts);&#10;            if (applicableDiscounts.isEmpty()) {&#10;                continue;&#10;            }&#10;            List&lt;Discount__c&gt; finalDiscounts = applyStrategy(applicableDiscounts, settings.strategy);&#10;            orderToDiscounts.put(ord.Id, finalDiscounts);&#10;        }&#10;        return orderToDiscounts;&#10;    }&#10;&#10;    public static void applyDiscountsAfterInsert(List&lt;Order&gt; insertedOrders) {&#10;        DiscountSettings settings = new DiscountSettings();&#10;        List&lt;Discount__c&gt; activeDiscounts = [SELECT Id, Name, Discount_Type__c, Value_Type__c, Discount_Value__c,&#10;                Start_Date__c, End_Date__c, Cron_Expression__c, Condition_Logic__c&#10;        FROM Discount__c WHERE Is_Active__c = true];&#10;        List&lt;Applied_Discount__c&gt; discountsToApply = new List&lt;Applied_Discount__c&gt;();&#10;        for (Order ord : insertedOrders) {&#10;            List&lt;Discount__c&gt; applicableDiscounts = findApplicableDiscounts(ord, activeDiscounts);&#10;            if (applicableDiscounts.isEmpty()) {&#10;                continue;&#10;            }&#10;            List&lt;Discount__c&gt; finalDiscounts = applyStrategy(applicableDiscounts, settings.strategy);&#10;            calculateAndAssignFinalDiscount(ord, finalDiscounts, settings, discountsToApply);&#10;        }&#10;        if (!discountsToApply.isEmpty()) {&#10;            insert discountsToApply;&#10;            updateTimesUsedCounter(discountsToApply);&#10;        }&#10;    }&#10;&#10;    private static List&lt;Discount__c&gt; findApplicableDiscounts(Order ord, List&lt;Discount__c&gt; activeDiscounts) {&#10;        List&lt;Discount__c&gt; matchedDiscounts = new List&lt;Discount__c&gt;();&#10;        Date today = Date.today();&#10;&#10;        for (Discount__c disc : activeDiscounts) {&#10;            Boolean isApplicable = false;&#10;            if (disc.Discount_Type__c == 'Time-Bound') {&#10;                if (disc.Start_Date__c &lt;= today &amp;&amp; disc.End_Date__c &gt;= today) {&#10;                    isApplicable = true;&#10;                }&#10;            } else if (disc.Discount_Type__c == 'Conditional') {&#10;                if (String.isNotBlank(disc.Condition_Logic__c) &amp;&amp; disc.Condition_Logic__c.contains('&gt;')) {&#10;                    List&lt;String&gt; parts = disc.Condition_Logic__c.split('&gt;');&#10;                    String fieldName = parts[0].trim().split('\\.')[1];&#10;                    Decimal value = Decimal.valueOf(parts[1].trim());&#10;&#10;                    if (ord.get(fieldName) != null &amp;&amp; (Decimal) ord.get(fieldName) &gt; value) {&#10;                        isApplicable = true;&#10;                    }&#10;                }&#10;            } else if (disc.Discount_Type__c == 'Recurring') {&#10;                if (isCronScheduledForToday(disc.Cron_Expression__c)) {&#10;                    isApplicable = true;&#10;                }&#10;            }&#10;&#10;            if (isApplicable) {&#10;                matchedDiscounts.add(disc);&#10;            }&#10;        }&#10;        return matchedDiscounts;&#10;    }&#10;&#10;    private static List&lt;Discount__c&gt; applyStrategy(List&lt;Discount__c&gt; applicableDiscounts, String strategy) {&#10;        if (applicableDiscounts.size() &lt;= 1) {&#10;            return applicableDiscounts;&#10;        }&#10;&#10;        List&lt;Discount__c&gt; finalDiscounts = new List&lt;Discount__c&gt;();&#10;&#10;        if (strategy == 'Combine') {&#10;            return applicableDiscounts;&#10;        } else if (strategy == 'Highest' || strategy == 'Lowest') {&#10;            Discount__c bestDiscount = applicableDiscounts[0];&#10;            for (Integer i = 1; i &lt; applicableDiscounts.size(); i++) {&#10;                if (strategy == 'Highest' &amp;&amp; applicableDiscounts[i].Discount_Value__c &gt; bestDiscount.Discount_Value__c) {&#10;                    bestDiscount = applicableDiscounts[i];&#10;                } else if (strategy == 'Lowest' &amp;&amp; applicableDiscounts[i].Discount_Value__c &lt; bestDiscount.Discount_Value__c) {&#10;                    bestDiscount = applicableDiscounts[i];&#10;                }&#10;            }&#10;            finalDiscounts.add(bestDiscount);&#10;        }&#10;        return finalDiscounts;&#10;    }&#10;&#10;    private static void calculateAndAssignFinalDiscount(Order ord, List&lt;Discount__c&gt; finalDiscounts, DiscountSettings settings, List&lt;Applied_Discount__c&gt; discountsToApply) {&#10;        Decimal totalDiscountAmount = 0;&#10;        Decimal originalOrderAmount = ord.TotalAmount == null ? 0 : ord.TotalAmount;&#10;&#10;        for (Discount__c disc : finalDiscounts) {&#10;            Decimal currentDiscountValue = 0;&#10;            if (disc.Value_Type__c == 'Percentage') {&#10;                currentDiscountValue = (originalOrderAmount * (disc.Discount_Value__c / 100)).setScale(2);&#10;            } else {&#10;                currentDiscountValue = disc.Discount_Value__c;&#10;            }&#10;            totalDiscountAmount += currentDiscountValue;&#10;            discountsToApply.add(new Applied_Discount__c(&#10;                    Order__c = ord.Id,&#10;                    Discount__c = disc.Id,&#10;                    Amount_Discounted__c = currentDiscountValue&#10;            ));&#10;        }&#10;&#10;        Decimal maxAllowedDiscount = originalOrderAmount * (settings.maxDiscountPercent / 100);&#10;        if (totalDiscountAmount &gt; maxAllowedDiscount) {&#10;            totalDiscountAmount = maxAllowedDiscount;&#10;        }&#10;        System.debug('Dla zamówienia ' + ord.Id + ' zastosowano zniżkę w wysokości: ' + totalDiscountAmount);&#10;    }&#10;&#10;    private static void updateTimesUsedCounter(List&lt;Applied_Discount__c&gt; applied) {&#10;        Map&lt;Id, Discount__c&gt; discountsToUpdate = new Map&lt;Id, Discount__c&gt;();&#10;        for (Applied_Discount__c ad : applied) {&#10;            if (!discountsToUpdate.containsKey(ad.Discount__c)) {&#10;                discountsToUpdate.put(ad.Discount__c, new Discount__c(Id = ad.Discount__c, Times_Used__c = 0));&#10;            }&#10;            Discount__c disc = discountsToUpdate.get(ad.Discount__c);&#10;            disc.Times_Used__c += 1;&#10;        }&#10;        update discountsToUpdate.values();&#10;    }&#10;&#10;    public static Boolean isCronScheduledForToday(String cron) {&#10;        if (String.isBlank(cron)) return false;&#10;        if (cron.contains(String.valueOf(Date.today().day()))) {&#10;            return true;&#10;        }&#10;        return false;&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>